package xlsys.base.model;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import xlsys.base.database.IDataBase;
import xlsys.base.database.IEnvDataBase;
import xlsys.base.database.TableInfo;
import xlsys.base.database.bean.ParamBean;
import xlsys.base.database.util.TranslateUtil;
import xlsys.base.dataset.IDataSet;
import xlsys.base.util.ObjectUtil;

public class ModelUtil
{
	public static <T extends IModel> T getModelFromData(IDataBase dataBase, Class<T> modelClass, ParamBean pb) throws Exception
	{
		List<T> modelList = getModelsFromDatas(dataBase, modelClass, pb);
		if(modelList!=null&&modelList.size()>0) return modelList.get(0);
		else return null;
	}
	
	public static <T extends IModel> List<T> getModelsFromDatas(IDataBase dataBase, Class<T> modelClass, ParamBean pb) throws Exception
	{
		List<T> modelList = new ArrayList<T>();
		IDataSet dataSet = dataBase.sqlSelect(pb);
		if(dataBase instanceof IEnvDataBase) TranslateUtil.getInstance().translateDataSet((IEnvDataBase)dataBase, dataSet);
		Constructor<T> constructor = modelClass.getDeclaredConstructor();
		constructor.setAccessible(true);
		// 获取所有方法,方法名全部转换成小写,同名会被覆盖掉,这里要注意
		Map<String, Method> methodMap = new HashMap<String, Method>();
		Method[] methods = modelClass.getDeclaredMethods();
		for(Method m : methods)
		{
			m.setAccessible(true);
			methodMap.put(m.getName().toLowerCase(), m);
		}
		// 构造新的model
		for(int i=0;i<dataSet.getRowCount();i++)
		{
			T model = constructor.newInstance();
			// 设置属性
			for(int j=0;j<dataSet.getColumnCount();j++)
			{
				Serializable value = dataSet.getValue(i, j);
				String colName = dataSet.getColumnName(j);
				Method method = methodMap.get("set"+colName.toLowerCase());
				if(method!=null&&method.getParameterTypes().length==1) method.invoke(model, ObjectUtil.objectCast(value, method.getParameterTypes()[0]));
			}
			modelList.add(model);
		}
		return modelList;
	}
	
	/**
	 * 自动生成表对应的model类, 如果该类已存在则会覆盖. 在生成时, 如果存在引用的表, 则会在classNameMap中查找该表对应的类, 如果类名存在, 但类不存在, 则会自动生成被引用到的类.
	 * @param dataBase 数据库连接
	 * @param tableName 表名称
	 * @param srcRoot 放置Model类的源文件根目录
	 * @param classNameMap 表名与类名的对应关系Map, key为表名, value为对应的类名
	 * @param classLoader 
	 * @throws Exception
	 * @return 成功则返回true, 失败返回false
	 */
	public static boolean createModelClassFromDB(IDataBase dataBase, String tableName, String srcRoot, Map<String, String> classNameMap, ClassLoader classLoder) throws Exception
	{
		boolean success = true;
		TableInfo tableInfo= dataBase.getTableInfo(tableName);
		if(tableInfo==null) throw new RuntimeException("Can not find table : " + tableName);
		String classFullName = classNameMap.get(tableName);
		if(classFullName==null) return false;
		int lastDotIdx = classFullName.lastIndexOf('.');
		String packageName = classFullName.substring(0, lastDotIdx);
		String className = classFullName.substring(lastDotIdx+1);
		StringBuilder sb = new StringBuilder();
		// 添加包信息
		sb.append("package ").append(packageName).append(';').append('\n');
		// 生成import信息
		StringBuilder importSb = new StringBuilder();
		importSb.append("import xlsys.base.model.ITableModel;").append('\n');
		// 生成类注释
		StringBuilder classSb = new StringBuilder();
		classSb.append("/**").append('\n');
		classSb.append(" * This class is automatically generated by the program of Lewis.").append('\n');
		classSb.append(" * @author Lewis").append('\n');
		classSb.append(" *").append('\n');
		classSb.append(" */").append('\n');
		// 生成类头
		classSb.append("public class").append(className).append(" implements ITableModel").append('\n');
		classSb.append('{').append('\n');
		// 生成类属性 TODO
		
		// 生成类尾
		classSb.append('}');
		
		return success;
	}
}
